{"version":3,"file":"assets/js/424.33ebcfc0.js","mappings":"0GAAA,SAASA,EAAYC,GACnB,YAAiBC,IAAVD,CACT,CAEA,SAASE,EAAOF,GACd,OAAiB,OAAVA,CACT,CAEA,SAASG,EAAUH,GACjB,MAAwB,mBAAVA,CAChB,CAEA,SAASI,EAASJ,GAChB,OAAOA,IAAUK,OAAOL,EAC1B,CAEA,SAASM,EAAQN,GACf,OAAOO,MAAMD,QAAQN,EACvB,CAEA,SAASQ,EAAOR,GACd,OAAOA,aAAiBS,IAC1B,CAEA,SAASC,EAAOV,EAAOW,GACrB,OAAOA,EACHP,EAASJ,KAAWD,EAAYC,EAAMY,KACtCR,EAASJ,IACe,kBAAfA,EAAMa,MACS,kBAAfb,EAAMc,MACU,oBAAhBd,EAAMe,KACrB,CAEA,SAASC,EAAOhB,EAAOW,GACrB,OACED,EAAOV,EAAOW,IACQ,kBAAfX,EAAMiB,OACZb,EAASJ,EAAMkB,mBAAmD,kBAAvBlB,EAAMmB,aAEtD,CAEA,SAASC,EAAQpB,GACf,OAAOD,EAAYC,IAAiBA,CACtC,CAEA,SAASqB,EAAUC,EAAKC,EAAKC,EAAIC,GAC/BF,EAAMA,GAAO,CAAC,EACdC,EAAKA,GAAM,IAAIE,SAEfH,EAAII,QAAUP,EAAQG,EAAII,SAC1BJ,EAAIK,kBAAoBR,EAAQG,EAAIK,mBACpCL,EAAIM,mBAAqBT,EAAQG,EAAIM,oBACrCN,EAAIO,iBAAmBV,EAAQG,EAAIO,kBACnCP,EAAIQ,8BAAgCX,EAClCG,EAAIQ,+BAENR,EAAIS,yBAA2BZ,EAAQG,EAAIS,0BAC3CT,EAAIU,sBAAwBb,EAAQG,EAAIU,uBAExC,MAAMtB,EAAuC,oBAAhBa,EAAGU,SAEhC,OAAInC,EAAYuB,KAELpB,EAAOoB,GACXC,EAAIK,mBACPJ,EAAGW,OAAOV,EAAK,IAERtB,EAAUmB,GACfC,EAAIM,mBACNL,EAAGW,OAAOV,EAAKH,EAAM,EAAI,GAEzBE,EAAGW,OAAOV,EAAKH,GAERhB,EAAQgB,GACbA,EAAIc,OACNd,EAAIe,SAAQ,CAACrC,EAAOsC,KAClB,IAAIC,EAAMd,EAAM,KAAOF,EAAII,QAAUW,EAAQ,IAAM,KAGjDf,EAAIQ,+BACHR,EAAIS,0BAA4BhB,EAAOhB,EAAOW,MAE/C4B,EAAMd,GAGRJ,EAAUrB,EAAOuB,EAAKC,EAAIe,EAAI,IAEvBhB,EAAIO,kBACbN,EAAGW,OAAOZ,EAAIQ,8BAAgCN,EAAMA,EAAM,KAAM,IAEzDjB,EAAOc,GAChBE,EAAGW,OAAOV,EAAKH,EAAIkB,eACVpC,EAASkB,KAASZ,EAAOY,EAAKX,GACvCN,OAAOoC,KAAKnB,GAAKe,SAASK,IACxB,MAAM1C,EAAQsB,EAAIoB,GAElB,GAAIpC,EAAQN,GACV,MAAO0C,EAAKN,OAAS,GAAKM,EAAKC,YAAY,QAAUD,EAAKN,OAAS,EACjEM,EAAOA,EAAKE,UAAU,EAAGF,EAAKN,OAAS,GAI3C,MAAMG,EAAMd,EACRF,EAAIU,sBACFR,EAAM,IAAMiB,EACZjB,EAAM,IAAMiB,EAAO,IACrBA,EAEJrB,EAAUrB,EAAOuB,EAAKC,EAAIe,EAAI,IAGhCf,EAAGW,OAAOV,EAAKH,IAjDRE,CAqDX,CAEAqB,EAAOC,QAAU,CACfzB,Y,4FCpHF,MAAM,EAAE0B,EAAC,GAAEC,GAAOC,EAAAA,WAAAA,OAElB,MAAMC,EAIJC,cACEC,KAAKC,OAAS,CAAC,EACfD,KAAKE,OAAS,KACdF,KAAKG,QAAU,EACjB,CAOAC,IAAIC,GACF,IAAK,IAAIlB,KAAOa,KAAKC,OACnB,GAAId,IAAQkB,EACV,OAAO,EAIX,OAAO,CACT,CAKAC,MACE,OACkB,OAAhBN,KAAKC,aACWpD,IAAhBmD,KAAKC,QACLhD,OAAOoC,KAAKW,KAAKC,QAAQjB,OAAS,CAEtC,CAOAuB,IAAIF,GACF,GAAIL,KAAKC,OAAOI,GACd,OAAOL,KAAKC,OAAOI,GAAO,EAE9B,CAOAG,OAAOC,GACLT,KAAKC,YAA6BpD,IAApB4D,EAASR,OAAuBQ,EAASR,OAAS,CAAC,EACjED,KAAKG,aAA+BtD,IAArB4D,EAASN,QAAwBM,EAASN,QAAU,EACrE,CAOAO,UAAUR,GACRF,KAAKE,OAASA,CAChB,CAOAS,MAAMN,EAAQ,MACZ,GAAIA,EAOF,cANOL,KAAKC,OAAOI,QAEdL,KAAKC,OAAOjB,SACfgB,KAAKG,QAAU,KAMnBH,KAAKC,OAAS,CAAC,EACfD,KAAKE,OAAS,KACdF,KAAKG,QAAU,EACjB,CAKAS,aACE,OAAoB,OAAhBZ,KAAKE,QAAmBN,EAAG,mBAAqBI,KAAKE,QAChDP,EAAE,mBAAqBK,KAAKE,QAG9BF,KAAKG,OACd,EAGF,Q,UCnGA,MAAMU,EAMJd,YAAYe,GACVd,KAAKe,MAAQD,EACbd,KAAKgB,QAAU,IAAIlB,EACnBE,KAAKiB,YAAa,EAClBjB,KAAKkB,YAAa,EAClBlB,KAAKmB,OAAQ,EACbnB,KAAKoB,IAAMN,EAAK,OAAS,KAEzB,IAAK,IAAIT,KAASS,EAChBd,KAAKK,GAASS,EAAKT,EAEvB,CAOAgB,QAAQC,GACN,IAAK,IAAIjB,KAASL,KAAKe,aACdf,KAAKK,GAGdL,KAAKe,MAAQO,EAEb,IAAK,IAAIjB,KAASiB,EAChBtB,KAAKK,GAASiB,EAAQjB,GAGxBL,KAAKoB,IAAME,EAAQ,OAAS,KAE5BtB,KAAKuB,YACP,CAQAC,WAAWF,EAASG,GAAW,GAC7B,IAAK,IAAIpB,KAASL,KAAKe,MACrBf,KAAKe,MAAMV,GAASiB,EAAQjB,GAC5BL,KAAKK,GAASiB,EAAQjB,GAGpBoB,IACFzB,KAAKoB,IAAME,EAAQ,OAAS,MAG9BtB,KAAKuB,YACP,CAOAG,QACE,OAAO1B,KAAKoB,GACd,CAKAO,aACE,IAAK,IAAItB,KAASL,KAAKe,aACdf,KAAKK,GAGdL,KAAKe,MAAQ,CAAC,CAChB,CAUAa,QAAQzC,EAAK0C,EAAOC,GAAW,GAC7B,GAAqB,kBAAVD,EAAoB,CAG7B,GAFA7B,KAAKkB,YAAa,EAEdY,EAGF,OAFA9B,KAAKb,GAAO0C,GAEL,EAGT,GAAIA,EAAM,aAAcE,KAGtB,OAFA/B,KAAKb,GAAO0C,EAAM,IAEX,CAEX,CAEA,OAAO,CACT,CAOAG,aACE,IAAIC,EAAU,CAAC,EAMf,OAJIjC,KAAKkB,aACPe,EAAQ,gBAAkB,uBAGrBA,CACT,CAOAC,UACE,IAAIpB,EAAO,CAAC,EAEZ,IAAK,IAAIT,KAASL,KAAKe,MACrBD,EAAKT,GAASL,KAAKK,GAGrB,OAAOS,CACT,CAOAqB,WACE,IAAIC,EAAmB,CACrB7D,SAAS,EACTC,mBAAmB,EACnBC,oBAAoB,EACpBC,kBAAkB,GAGpB,OAAOT,EAAAA,EAAAA,WAAU+B,KAAKkC,UAAWE,EACnC,CAOAC,WACE,IAAIvB,EAAO,CAAC,EAEZ,IAAK,IAAIT,KAASL,KAAKe,MACD,OAAhBf,KAAKK,IAA0C,qBAAhBL,KAAKK,KACtCS,EAAKT,GAASL,KAAKK,IAIvB,OAAOS,CACT,CAQAwB,QAAQjC,EAAOzD,GACToD,KAAKK,GACPL,KAAKK,GAASzD,GAKhBoD,KAAKK,GAASzD,EACdoD,KAAKe,MAAMV,GAASzD,EACtB,CAOA2F,gBACE,OAAOvC,KAAKiB,UACd,CAOAuB,WACE,OAAoB,OAAbxC,KAAKoB,GACd,CAOAqB,OAEE,OADAzC,KAAKmB,OAAQ,EACNnB,IACT,CAOA0C,SACE,OAAO1C,KAAKmB,KACd,CAQAwB,KAAKC,EAAKC,EAAK,MACb,OAAIA,EACK7C,KAAK8C,OAAO,OAAS,GAAEF,KAAOC,KAGhC7C,KAAK8C,OAAO,OAAQF,EAC7B,CAQAG,IAAIH,EAAKC,EAAK,MACZ,OAAIA,EACK7C,KAAK8C,OAAO,MAAQ,GAAEF,KAAOC,KAG/B7C,KAAK8C,OAAO,MAAQ,GAAEF,IAC/B,CAQAI,MAAMJ,EAAKC,EAAK,MACd,OAAIA,EACK7C,KAAK8C,OAAO,QAAU,GAAEF,KAAOC,KAGjC7C,KAAK8C,OAAO,QAASF,EAC9B,CAQAK,OAAOL,EAAKC,EAAK,MACf,OAAIA,EACK7C,KAAK8C,OAAO,SAAW,GAAEF,KAAOC,KAGlC7C,KAAK8C,OAAO,SAAUF,EAC/B,CASAE,OAAOI,EAAaN,GAClB5C,KAAKmD,eAEL,IAAIrC,EAAOd,KAAK0C,SAAW1C,KAAKqC,WAAarC,KAAKmC,WAC9CiB,EAAU,CACZnB,QAASjC,KAAKgC,cAGhB,OAAO,IAAIqB,SAAQ,CAACC,EAASC,KAC3BC,EAAAA,EAAIN,GAAaN,EAAK9B,EAAMsC,GACzBK,MAAMhD,IACLT,KAAK0D,UAAUjD,EAASK,MAExBwC,EAAQ7C,EAASK,KAAK,IAEvB6C,OAAOC,IACN5D,KAAK6D,OAAOD,EAAMnD,UAElB8C,EAAOK,EAAMnD,SAASK,KAAK,IAE5BgD,SAAQ,KACP9D,KAAK+D,aAAa,GAClB,GAER,CAKAC,QACE,IAAK,IAAI3D,KAASL,KAAKe,MACrBf,KAAKK,GAASL,KAAKe,MAAMV,GAG3BL,KAAKgB,QAAQL,OACf,CAQAsD,SAAS5D,GACP,OAAOL,KAAKgB,QAAQZ,IAAIC,EAC1B,CAOA6D,kBACE,OAAOlE,KAAKgB,QAAQJ,YACtB,CAQAuD,SAAS9D,GACP,OAAOL,KAAKgB,QAAQT,IAAIF,EAC1B,CAOAkB,WAAWlB,EAAQ,MACjB,OAAOL,KAAKgB,QAAQL,MAAMN,EAC5B,CAKA8C,eACEnD,KAAKiB,YAAa,CACpB,CAKA8C,cACE/D,KAAKiB,YAAa,CACpB,CAOAyC,UAAU5C,GACJd,KAAKwC,YACPxC,KAAKwB,WAAWV,GAAM,GAGxBd,KAAKgE,OACP,CAOAH,OAAOpD,GACLT,KAAKgB,QAAQN,UAAUD,EAASP,aAEVrD,IAAlB4D,EAASK,MACXd,KAAKgB,QAAQR,OAAOC,EAASK,KAEjC,EAGF,O,kDCrZA,MAAMsD,EAIJrE,cACEC,KAAKqE,OAAQC,EAAAA,EAAAA,MACbtE,KAAKuE,OAAS,CACZC,SAAU,gBACVC,QAAS,IACTC,cAAc,EACdC,kBAAkB,EAClBC,cAAc,EACdC,wBAAwB,EACxBC,YAAa,SACbC,MAAM,EAEV,CASAC,KAAK7E,EAASzC,EAAO,OAAQ6G,EAAS,CAAC,GACrCvE,KAAKqE,MAAM3G,GAAMyC,EAAS,IAAKH,KAAKuE,UAAWA,GACjD,EAGF,WAAmBH,C,4HC7BZa,MAAM,6C,GACJA,MAAM,6B,GACJA,MAAM,mB,GAKFA,MAAM,a,GAEAC,IAAI,Y,GACLD,MAAM,wB,GASRA,MAAM,mK,GAYVA,MAAM,+D,GAEDA,MAAM,a,GAMFA,MAAM,Q,mDAUNA,MAAM,Q,mDAWNA,MAAM,Y,yBAOPE,EAAAA,EAAAA,GAAiC,KAA9BF,MAAM,qBAAmB,S,GAA5BG,G,GAKDH,MAAM,iC,GAWVA,MAAM,Y,gLArFrBI,EAAAA,EAAAA,IAAwDC,EAAA,CAAtCC,MAAOxE,EAAAyE,aAAW,mBAEpCL,EAAAA,EAAAA,GAgGM,MAhGNM,EAgGM,EA/FJN,EAAAA,EAAAA,GA8FM,MA9FNO,EA8FM,EA7FJP,EAAAA,EAAAA,GA4FM,MA5FNQ,EA4FM,EA3FJR,EAAAA,EAAAA,GA0FO,QAzFJS,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAE/E,EAAAgF,KAAKxE,WAAWuE,EAAOE,OAAOnI,OACrCoI,SAAMJ,EAAA,KAAAA,EAAA,IAAAK,EAAAA,EAAAA,KAAAJ,GAAUK,EAAArD,UAAM,e,EAEvBqC,EAAAA,EAAAA,GAqFM,MArFNiB,EAqFM,EApFJjB,EAAAA,EAAAA,GAoBM,aAnBJA,EAAAA,EAAAA,GAAyD,QAAzDkB,GAAyDC,EAAAA,EAAAA,IAAhCC,EAAAC,GAAG,oBAAD,IAC3BrB,EAAAA,EAAAA,GAaO,OAbPsB,EAaO,WAZLtB,EAAAA,EAAAA,GAME,S,qCALSpE,EAAAgF,KAAKlI,KAAIiI,GAClBjD,GAAG,WACHhF,KAAK,OACLH,KAAK,OACLuH,MAAM,8O,iBAJGlE,EAAAgF,KAAKlI,SAMhBsH,EAAAA,EAAAA,GAIO,OAJPuB,EAIO,EADLrB,EAAAA,EAAAA,IAAwCsB,EAAA,CAAhC9I,KAAK,SAASJ,KAAK,WAI/B4H,EAAAA,EAAAA,IAEsBuB,EAAA,M,kBADpB,IAA2B,mBAAxB7F,EAAAgF,KAAK5B,SAAS,SAAD,M,SAIpBgB,EAAAA,EAAAA,GAmDM,MAnDN0B,EAmDM,EAhDJ1B,EAAAA,EAAAA,GA+CM,MA/CN2B,EA+CM,gBA9CJC,EAAAA,EAAAA,IAoCMC,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IAnCqBlG,EAAAgF,KAAKmB,QAAM,CAA5BC,EAAOjI,M,WADjB6H,EAAAA,EAAAA,IAoCM,OAlCH5H,IAAKD,EACN+F,MAAM,wB,EAENE,EAAAA,EAAAA,GASM,MATNiC,EASM,EARJjC,EAAAA,EAAAA,GAAsD,SAA9CD,IAAG,YAAchG,SAAa,WAAQ,EAAAmI,IAAA,SAC9ClC,EAAAA,EAAAA,GAME,S,yBALSgC,EAAMtJ,KAAIiI,EAClBjI,KAAI,QAAUqB,QACd2D,GAAE,YAAc3D,QACjBxB,KAAK,OACLuH,MAAM,gP,iBAJGkC,EAAMtJ,WAOnBsH,EAAAA,EAAAA,GAUM,MAVNmC,EAUM,EATJnC,EAAAA,EAAAA,GAAyD,SAAjDD,IAAG,YAAchG,SAAa,cAAW,EAAAqI,IAAA,SACjDpC,EAAAA,EAAAA,GAOE,S,yBANSgC,EAAM1J,KAAIqI,EAClBjI,KAAI,QAAUqB,QACd2D,GAAE,YAAc3D,QACjBxB,KAAK,SACL8J,IAAI,IACJvC,MAAM,gP,iBALGkC,EAAM1J,WAQnB0H,EAAAA,EAAAA,GASM,MATNsC,EASM,EARJtC,EAAAA,EAAAA,GAOS,UANPzH,KAAK,SACLuH,MAAM,sEACLyC,MAAOnB,EAAAC,GAAG,iBACVmB,QAAK7B,GAAEK,EAAAyB,YAAY1I,I,qBAO1BiG,EAAAA,EAAAA,GAOM,MAPN0C,EAOM,EANJxC,EAAAA,EAAAA,IAEWyC,EAAA,CAFDC,MAAM,SAAUtK,KAAM,EAAIkK,QAAOxB,EAAAyB,a,mBACxC,IAAoC,mBAAjCrB,EAAAC,GAAG,6BAAD,M,qBAERnB,EAAAA,EAAAA,IAEWyC,EAAA,CAFDC,MAAM,UAAWtK,KAAM,EAAIkK,QAAOxB,EAAA6B,U,mBACzC,IAA4B,mBAAzBzB,EAAAC,GAAG,qBAAD,M,2BAMdrB,EAAAA,EAAAA,GAQM,MARN8C,EAQM,EAPJ5C,EAAAA,EAAAA,IAMWyC,EAAA,CALTpK,KAAK,SACLqK,MAAM,UACLG,UAAWnH,EAAAgF,KAAKxD,iB,mBAEjB,IAAyB,mBAAtBgE,EAAAC,GAAG,kBAAD,M,mFAerB,GACE3I,KAAM,gBACNsK,MAAO,CACLtF,GAAI,CACFnF,KAAM0K,OACNC,UAAU,IAGdvH,OACE,MAAO,CACL0E,YAAa,CACX,CAAEkC,MAAO1H,KAAKwG,GAAG,qBAAsB8B,MAAO,cAC9C,CACEZ,MAAO1H,KAAK6C,GACR7C,KAAKwG,GAAG,yBACRxG,KAAKwG,GAAG,wBACZ+B,QAAQ,IAGZxC,KAAM,IAAIlF,EAAAA,EAAK,CACbhD,KAAM,GACNqJ,OAAQ,CAAC,CAAErJ,KAAM,SAAUJ,KAAM,MAGvC,EACA+K,gBACMxI,KAAK6C,UACDW,EAAAA,EAAAA,IAAS,cAAaxD,KAAK6C,MAAMY,MAAK,EAAG3C,WAC7Cd,KAAK+F,KAAKvE,WAAWV,EAAK,GAGhC,EACA2H,QAAS,CACPT,WACEhI,KAAK+F,KAAKmB,OAAOwB,KAAK,CACpB7K,KAAO,GAAEmC,KAAKwG,GAAG,mBAAmBxG,KAAK+F,KAAKmB,OAAOlI,OAAS,IAC9DvB,KAAM,GAEV,EACAmK,YAAY1I,EAAQ,MACdc,KAAK+F,KAAKmB,OAAOlI,OAAS,GAC5BgB,KAAK+F,KAAKmB,OAAOyB,OAAOzJ,GAASc,KAAK+F,KAAKmB,OAAOlI,OAAS,EAAG,EAElE,EACA8D,SACM9C,KAAK+F,KAAKvD,WACZxC,KAAK+F,KACFtD,OACAE,KAAK,oBAAqB3C,KAAK+F,KAAKrE,SACpC+B,MAAK,KACJW,EAAAA,EAAAA,KAAWpE,KAAKwG,GAAG,2BAA4B,UAAU,IAE1D7C,OAAM,KACLS,EAAAA,EAAAA,KAAWpE,KAAK+F,KAAK7B,kBAAmB,QAAQ,IAGpDlE,KAAK+F,KACFtD,OACAE,KAAK,oBACLc,MAAK,KACJW,EAAAA,EAAAA,KAAWpE,KAAKwG,GAAG,0BAA2B,UAAU,IAEzD7C,OAAM,KACLS,EAAAA,EAAAA,KAAWpE,KAAK+F,KAAK7B,kBAAmB,QAAQ,GAGxD,I,QCxKJ,MAAM0E,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://surveyor-front/./node_modules/object-to-formdata/src/index.js","webpack://surveyor-front/./src/core/Errors.js","webpack://surveyor-front/./src/core/Form.js","webpack://surveyor-front/./src/core/Toast.js","webpack://surveyor-front/./src/views/workspace/Form.vue","webpack://surveyor-front/./src/views/workspace/Form.vue?0ce9"],"sourcesContent":["function isUndefined(value) {\n  return value === undefined;\n}\n\nfunction isNull(value) {\n  return value === null;\n}\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\nfunction isObject(value) {\n  return value === Object(value);\n}\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\nfunction isDate(value) {\n  return value instanceof Date;\n}\n\nfunction isBlob(value, isReactNative) {\n  return isReactNative\n    ? isObject(value) && !isUndefined(value.uri)\n    : isObject(value) &&\n        typeof value.size === 'number' &&\n        typeof value.type === 'string' &&\n        typeof value.slice === 'function';\n}\n\nfunction isFile(value, isReactNative) {\n  return (\n    isBlob(value, isReactNative) &&\n    typeof value.name === 'string' &&\n    (isObject(value.lastModifiedDate) || typeof value.lastModified === 'number')\n  );\n}\n\nfunction initCfg(value) {\n  return isUndefined(value) ? false : value;\n}\n\nfunction serialize(obj, cfg, fd, pre) {\n  cfg = cfg || {};\n  fd = fd || new FormData();\n\n  cfg.indices = initCfg(cfg.indices);\n  cfg.nullsAsUndefineds = initCfg(cfg.nullsAsUndefineds);\n  cfg.booleansAsIntegers = initCfg(cfg.booleansAsIntegers);\n  cfg.allowEmptyArrays = initCfg(cfg.allowEmptyArrays);\n  cfg.noAttributesWithArrayNotation = initCfg(\n    cfg.noAttributesWithArrayNotation,\n  );\n  cfg.noFilesWithArrayNotation = initCfg(cfg.noFilesWithArrayNotation);\n  cfg.dotsForObjectNotation = initCfg(cfg.dotsForObjectNotation);\n\n  const isReactNative = typeof fd.getParts === 'function';\n\n  if (isUndefined(obj)) {\n    return fd;\n  } else if (isNull(obj)) {\n    if (!cfg.nullsAsUndefineds) {\n      fd.append(pre, '');\n    }\n  } else if (isBoolean(obj)) {\n    if (cfg.booleansAsIntegers) {\n      fd.append(pre, obj ? 1 : 0);\n    } else {\n      fd.append(pre, obj);\n    }\n  } else if (isArray(obj)) {\n    if (obj.length) {\n      obj.forEach((value, index) => {\n        let key = pre + '[' + (cfg.indices ? index : '') + ']';\n\n        if (\n          cfg.noAttributesWithArrayNotation ||\n          (cfg.noFilesWithArrayNotation && isFile(value, isReactNative))\n        ) {\n          key = pre;\n        }\n\n        serialize(value, cfg, fd, key);\n      });\n    } else if (cfg.allowEmptyArrays) {\n      fd.append(cfg.noAttributesWithArrayNotation ? pre : pre + '[]', '');\n    }\n  } else if (isDate(obj)) {\n    fd.append(pre, obj.toISOString());\n  } else if (isObject(obj) && !isBlob(obj, isReactNative)) {\n    Object.keys(obj).forEach((prop) => {\n      const value = obj[prop];\n\n      if (isArray(value)) {\n        while (prop.length > 2 && prop.lastIndexOf('[]') === prop.length - 2) {\n          prop = prop.substring(0, prop.length - 2);\n        }\n      }\n\n      const key = pre\n        ? cfg.dotsForObjectNotation\n          ? pre + '.' + prop\n          : pre + '[' + prop + ']'\n        : prop;\n\n      serialize(value, cfg, fd, key);\n    });\n  } else {\n    fd.append(pre, obj);\n  }\n\n  return fd;\n}\n\nmodule.exports = {\n  serialize,\n};\n","import i18n from \"@/lang/i18n\";\n\nconst { t, te } = i18n.global;\n\nclass Errors {\n  /**\n   * Create a new Errors instance.\n   */\n  constructor() {\n    this.errors = {};\n    this.status = null;\n    this.message = \"\";\n  }\n\n  /**\n   * Determine if an errors exists for the given field.\n   *\n   * @param {string} field\n   */\n  has(field) {\n    for (let key in this.errors) {\n      if (key === field) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Determine if we have any errors.\n   */\n  any() {\n    return (\n      this.errors !== null &&\n      this.errors !== undefined &&\n      Object.keys(this.errors).length > 0\n    );\n  }\n\n  /**\n   * Retrieve the error message for a field.\n   *\n   * @param {string} field\n   */\n  get(field) {\n    if (this.errors[field]) {\n      return this.errors[field][0];\n    }\n  }\n\n  /**\n   * Record the new errors.\n   *\n   * @param {object} response\n   */\n  record(response) {\n    this.errors = response.errors !== undefined ? response.errors : {};\n    this.message = response.message !== undefined ? response.message : \"\";\n  }\n\n  /**\n   * Record the status code.\n   *\n   * @param {number} status\n   */\n  setStatus(status) {\n    this.status = status;\n  }\n\n  /**\n   * Clear one or all error fields.\n   *\n   * @param {string|null} field\n   */\n  clear(field = null) {\n    if (field) {\n      delete this.errors[field];\n\n      if (!this.errors.length) {\n        this.message = \"\";\n      }\n\n      return;\n    }\n\n    this.errors = {};\n    this.status = null;\n    this.message = \"\";\n  }\n\n  /**\n   * Get response message.\n   */\n  getMessage() {\n    if (this.status !== null && te(\"response.errors.\" + this.status)) {\n      return t(\"response.errors.\" + this.status);\n    }\n\n    return this.message;\n  }\n}\n\nexport default Errors;\n","import api from \"./Api\";\nimport Errors from \"./Errors\";\nimport { serialize } from \"object-to-formdata\";\n\nclass Form {\n  /**\n   * Create a new Form instance.\n   *\n   * @param {object} data - The initial data for the form.\n   */\n  constructor(data) {\n    this.$data = data;\n    this.$errors = new Errors();\n    this.$canSubmit = true;\n    this.$multipart = false;\n    this.$json = false;\n    this.$id = data[\"id\"] ?? null;\n\n    for (let field in data) {\n      this[field] = data[field];\n    }\n  }\n\n  /**\n   * Delete old fields and set new data.\n   *\n   * @param {object} newData - The new data to set.\n   */\n  setData(newData) {\n    for (let field in this.$data) {\n      delete this[field];\n    }\n\n    this.$data = newData;\n\n    for (let field in newData) {\n      this[field] = newData[field];\n    }\n\n    this.$id = newData[\"id\"] ?? null;\n\n    this.clearError();\n  }\n\n  /**\n   * Update data by fields.\n   *\n   * @param {object} newData - The new data to update.\n   * @param {boolean} updateId - State of the update ID.\n   */\n  updateData(newData, updateId = true) {\n    for (let field in this.$data) {\n      this.$data[field] = newData[field];\n      this[field] = newData[field];\n    }\n\n    if (updateId) {\n      this.$id = newData[\"id\"] ?? null;\n    }\n\n    this.clearError();\n  }\n\n  /**\n   * Get the data id.\n   *\n   * @returns {number|null} - The data id.\n   */\n  getId() {\n    return this.$id;\n  }\n\n  /**\n   * Delete the form fields.\n   */\n  deleteData() {\n    for (let field in this.$data) {\n      delete this[field];\n    }\n\n    this.$data = {};\n  }\n\n  /**\n   * Set files to be sent.\n   *\n   * @param {string} key - The key to set the files.\n   * @param {File[]|object} files - The files to set.\n   * @param {boolean} [multiple=false] - Whether multiple files can be set or not.\n   * @returns {boolean} - Returns true if the files are set successfully, false otherwise.\n   */\n  setFile(key, files, multiple = false) {\n    if (typeof files === \"object\") {\n      this.$multipart = true;\n\n      if (multiple) {\n        this[key] = files;\n\n        return true;\n      }\n\n      if (files[0] instanceof File) {\n        this[key] = files[0];\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the request headers.\n   *\n   * @returns {object} - The headers object.\n   */\n  getHeaders() {\n    let headers = {};\n\n    if (this.$multipart) {\n      headers[\"Content-Type\"] = \"multipart/form-data\";\n    }\n\n    return headers;\n  }\n\n  /**\n   * Fetch all relevant data.\n   *\n   * @returns {object} - The form data object.\n   */\n  getData() {\n    let data = {};\n\n    for (let field in this.$data) {\n      data[field] = this[field];\n    }\n\n    return data;\n  }\n\n  /**\n   * Fetch all relevant data for the form.\n   *\n   * @returns {FormData} - The form data object.\n   */\n  formData() {\n    let serializeOptions = {\n      indices: true,\n      nullsAsUndefineds: true,\n      booleansAsIntegers: true,\n      allowEmptyArrays: true,\n    };\n\n    return serialize(this.getData(), serializeOptions);\n  }\n\n  /**\n   * Fetch all relevant data for the form.\n   *\n   * @returns {object} - The form data object.\n   */\n  jsonData() {\n    let data = {};\n\n    for (let field in this.$data) {\n      if (this[field] !== null && typeof this[field] !== \"undefined\") {\n        data[field] = this[field];\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Add specific data to the form.\n   *\n   * @param {string} field - The field name.\n   * @param {any} value - The value to set.\n   */\n  addData(field, value) {\n    if (this[field]) {\n      this[field] = value;\n\n      return;\n    }\n\n    this[field] = value;\n    this.$data[field] = value;\n  }\n\n  /**\n   * Check if the form is submittable.\n   *\n   * @returns {boolean} - Returns true if the form is submittable, false otherwise.\n   */\n  isSubmittable() {\n    return this.$canSubmit;\n  }\n\n  /**\n   * Check if the form is in update mode.\n   *\n   * @returns {boolean} - Returns true if the form is in update mode, false otherwise.\n   */\n  isUpdate() {\n    return this.$id !== null;\n  }\n\n  /**\n   * Set the form to use JSON format for data.\n   *\n   * @returns {this} - Returns the Form instance.\n   */\n  json() {\n    this.$json = true;\n    return this;\n  }\n\n  /**\n   * Check if the form is using JSON format for data.\n   *\n   * @returns {boolean} - Returns true if the form is using JSON format, false otherwise.\n   */\n  isJson() {\n    return this.$json;\n  }\n\n  /**\n   * Send a POST request to the given URL.\n   *\n   * @param {string} url - The URL to send the request to.\n   * @param {number|null} id - The optional ID parameter for the URL.\n   */\n  post(url, id = null) {\n    if (id) {\n      return this.submit(\"post\", `${url}/${id}`);\n    }\n\n    return this.submit(\"post\", url);\n  }\n\n  /**\n   * Send a PUT request to the given URL.\n   *\n   * @param {string} url - The URL to send the request to.\n   * @param {number|null} id - The optional ID parameter for the URL.\n   */\n  put(url, id = null) {\n    if (id) {\n      return this.submit(\"put\", `${url}/${id}`);\n    }\n\n    return this.submit(\"put\", `${url}`);\n  }\n\n  /**\n   * Send a PATCH request to the given URL.\n   *\n   * @param {string} url - The URL to send the request to.\n   * @param {number|null} id - The optional ID parameter for the URL.\n   */\n  patch(url, id = null) {\n    if (id) {\n      return this.submit(\"patch\", `${url}/${id}`);\n    }\n\n    return this.submit(\"patch\", url);\n  }\n\n  /**\n   * Send a DELETE request to the given URL.\n   *\n   * @param {string} url - The URL to send the request to.\n   * @param {number|null} id - The optional ID parameter for the URL.\n   */\n  delete(url, id = null) {\n    if (id) {\n      return this.submit(\"delete\", `${url}/${id}`);\n    }\n\n    return this.submit(\"delete\", url);\n  }\n\n  /**\n   * Submit the form.\n   *\n   * @param {string} requestType - The type of the request.\n   * @param {string} url - The URL to send the request to.\n   * @returns {Promise} A Promise that resolves with the response data or rejects with the error.\n   */\n  submit(requestType, url) {\n    this.beforeSubmit();\n\n    let data = this.isJson() ? this.jsonData() : this.formData();\n    let options = {\n      headers: this.getHeaders(),\n    };\n\n    return new Promise((resolve, reject) => {\n      api[requestType](url, data, options)\n        .then((response) => {\n          this.onSuccess(response.data);\n\n          resolve(response.data);\n        })\n        .catch((error) => {\n          this.onFail(error.response);\n\n          reject(error.response.data);\n        })\n        .finally(() => {\n          this.afterSubmit();\n        });\n    });\n  }\n\n  /**\n   * Reset the form fields to their initial values.\n   */\n  reset() {\n    for (let field in this.$data) {\n      this[field] = this.$data[field];\n    }\n\n    this.$errors.clear();\n  }\n\n  /**\n   * Check if an error exists for the given field.\n   *\n   * @param {string} field - The field name.\n   * @returns {boolean} - Returns true if an error exists for the field, false otherwise.\n   */\n  hasError(field) {\n    return this.$errors.has(field);\n  }\n\n  /**\n   * Get the error message.\n   *\n   * @returns {string} - The error message.\n   */\n  getErrorMessage() {\n    return this.$errors.getMessage();\n  }\n\n  /**\n   * Get the error message for a field.\n   *\n   * @param {string} field - The field name.\n   * @returns {any} - The error message for the field.\n   */\n  getError(field) {\n    return this.$errors.get(field);\n  }\n\n  /**\n   * Clear the error for a specific field or all fields.\n   *\n   * @param {string|null} field - The optional field name to clear the error for.\n   */\n  clearError(field = null) {\n    return this.$errors.clear(field);\n  }\n\n  /**\n   * Execute a function before submitting the form.\n   */\n  beforeSubmit() {\n    this.$canSubmit = false;\n  }\n\n  /**\n   * Execute a function after submitting the form.\n   */\n  afterSubmit() {\n    this.$canSubmit = true;\n  }\n\n  /**\n   * Handle a successful form submission.\n   *\n   * @param {object} data - The response data.\n   */\n  onSuccess(data) {\n    if (this.isUpdate()) {\n      this.updateData(data, false);\n    }\n\n    this.reset();\n  }\n\n  /**\n   * Handle a failed form submission.\n   *\n   * @param {object} response - The response object.\n   */\n  onFail(response) {\n    this.$errors.setStatus(response.status);\n\n    if (response.data !== undefined) {\n      this.$errors.record(response.data);\n    }\n  }\n}\n\nexport default Form;\n","import { useToast } from \"vue-toastification\";\n\nclass Toast {\n  /**\n   * Create a new Toast instance.\n   */\n  constructor() {\n    this.toast = useToast();\n    this.config = {\n      position: \"bottom-center\",\n      timeout: 5000,\n      closeOnClick: true,\n      pauseOnFocusLoss: true,\n      pauseOnHover: true,\n      showCloseButtonOnHover: false,\n      closeButton: \"button\",\n      icon: true,\n    };\n  }\n\n  /**\n   * Fire a toast.\n   *\n   * @param {string} message\n   * @param {\"success\", \"info\", \"error\", \"warning\"} type\n   * @param {object} config\n   */\n  fire(message, type = \"info\", config = {}) {\n    this.toast[type](message, { ...this.config, ...config });\n  }\n}\n\nexport default new Toast();\n","<template>\n  <breadcrumb-list :items=\"breadcrumbs\"></breadcrumb-list>\n\n  <div class=\"grid grid-cols-12 gap-4 sm:gap-5 lg:gap-6\">\n    <div class=\"col-span-12 xl:col-span-8\">\n      <div class=\"p-4 card sm:p-5\">\n        <form\n          @input=\"form.clearError($event.target.name)\"\n          @submit.prevent=\"submit()\"\n        >\n          <div class=\"space-y-4\">\n            <div>\n              <label for=\"textName\">{{ $t(\"attributes.name\") }}</label>\n              <span class=\"relative flex mt-1.5\">\n                <input\n                  v-model=\"form.name\"\n                  id=\"textName\"\n                  name=\"name\"\n                  type=\"text\"\n                  class=\"w-full rounded-lg border border-slate-300 bg-transparent px-3 py-2 pl-9 placeholder:text-slate-400/70 form-input peer hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent\"\n                />\n                <span\n                  class=\"pointer-events-none absolute flex h-full w-10 items-center justify-center text-slate-400 peer-focus:text-primary dark:peer-focus:text-accent dark:text-navy-300\"\n                >\n                  <v-icon name=\"swatch\" size=\"6\"></v-icon>\n                </span>\n              </span>\n\n              <validation-feedback>\n                {{ form.getError(\"name\") }}\n              </validation-feedback>\n            </div>\n\n            <div\n              class=\"rounded-lg border border-slate-200 p-4 dark:border-navy-600\"\n            >\n              <div class=\"space-y-4\">\n                <div\n                  v-for=\"(group, index) in form.groups\"\n                  :key=\"index\"\n                  class=\"flex gap-x-2 gap-y-4\"\n                >\n                  <div class=\"grow\">\n                    <label :for=\"`textGroup${index}Name`\">Grup Adı</label>\n                    <input\n                      v-model=\"group.name\"\n                      :name=\"`group${index}Name`\"\n                      :id=\"`textGroup${index}Name`\"\n                      type=\"text\"\n                      class=\"w-full rounded-lg border border-slate-300 bg-transparent px-3 py-2 placeholder:text-slate-400/70 mt-1.5 form-input peer hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent\"\n                    />\n                  </div>\n                  <div class=\"grow\">\n                    <label :for=\"`textGroup${index}Size`\">Grup Boyutu</label>\n                    <input\n                      v-model=\"group.size\"\n                      :name=\"`group${index}Size`\"\n                      :id=\"`textGroup${index}Size`\"\n                      type=\"number\"\n                      min=\"0\"\n                      class=\"w-full rounded-lg border border-slate-300 bg-transparent px-3 py-2 placeholder:text-slate-400/70 mt-1.5 form-input peer hover:border-slate-400 focus:border-primary dark:border-navy-450 dark:hover:border-navy-400 dark:focus:border-accent\"\n                    />\n                  </div>\n                  <div class=\"self-end\">\n                    <button\n                      type=\"button\"\n                      class=\"h-9 w-9 text-slate-400 transition-colors close hover:text-slate-800\"\n                      :title=\"$t('labels.delete')\"\n                      @click=\"removeGroup(index)\"\n                    >\n                      <i class=\"fa fa-lg fa-times\"></i>\n                    </button>\n                  </div>\n                </div>\n\n                <div class=\"col-span-2 text-end space-x-2\">\n                  <v-button color=\"danger\" :size=\"8\" @click=\"removeGroup\"\n                    >{{ $t(\"labels.delete_last_group\") }}\n                  </v-button>\n                  <v-button color=\"success\" :size=\"8\" @click=\"addGroup\"\n                    >{{ $t(\"models.group.add\") }}\n                  </v-button>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"text-end\">\n              <v-button\n                type=\"submit\"\n                color=\"primary\"\n                :disabled=\"!form.isSubmittable()\"\n              >\n                {{ $t(\"labels.submit\") }}\n              </v-button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from \"@/core/Api\";\nimport Form from \"@/core/Form\";\nimport Toast from \"@/core/Toast\";\n\nexport default {\n  name: \"WorkspaceForm\",\n  props: {\n    id: {\n      type: String,\n      required: false,\n    },\n  },\n  data() {\n    return {\n      breadcrumbs: [\n        { title: this.$t(\"titles.workspaces\"), route: \"workspaces\" },\n        {\n          title: this.id\n            ? this.$t(\"models.workspace.edit\")\n            : this.$t(\"models.workspace.add\"),\n          active: true,\n        },\n      ],\n      form: new Form({\n        name: \"\",\n        groups: [{ name: \"Grup 1\", size: 0 }],\n      }),\n    };\n  },\n  async created() {\n    if (this.id) {\n      await api.get(`/workspace/${this.id}`).then(({ data }) => {\n        this.form.updateData(data);\n      });\n    }\n  },\n  methods: {\n    addGroup() {\n      this.form.groups.push({\n        name: `${this.$t(\"titles.group\")} ${this.form.groups.length + 1}`,\n        size: 0,\n      });\n    },\n    removeGroup(index = null) {\n      if (this.form.groups.length > 1) {\n        this.form.groups.splice(index ?? this.form.groups.length - 1, 1);\n      }\n    },\n    submit() {\n      if (this.form.isUpdate()) {\n        this.form\n          .json()\n          .post(\"/workspace/update\", this.form.getId())\n          .then(() => {\n            Toast.fire(this.$t(\"response.success.update\"), \"success\");\n          })\n          .catch(() => {\n            Toast.fire(this.form.getErrorMessage(), \"error\");\n          });\n      } else {\n        this.form\n          .json()\n          .post(\"/workspace/store\")\n          .then(() => {\n            Toast.fire(this.$t(\"response.success.store\"), \"success\");\n          })\n          .catch(() => {\n            Toast.fire(this.form.getErrorMessage(), \"error\");\n          });\n      }\n    },\n  },\n};\n</script>\n","import { render } from \"./Form.vue?vue&type=template&id=6a93f714\"\nimport script from \"./Form.vue?vue&type=script&lang=js\"\nexport * from \"./Form.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\xampp\\\\htdocs\\\\surveyor-front\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["isUndefined","value","undefined","isNull","isBoolean","isObject","Object","isArray","Array","isDate","Date","isBlob","isReactNative","uri","size","type","slice","isFile","name","lastModifiedDate","lastModified","initCfg","serialize","obj","cfg","fd","pre","FormData","indices","nullsAsUndefineds","booleansAsIntegers","allowEmptyArrays","noAttributesWithArrayNotation","noFilesWithArrayNotation","dotsForObjectNotation","getParts","append","length","forEach","index","key","toISOString","keys","prop","lastIndexOf","substring","module","exports","t","te","i18n","Errors","constructor","this","errors","status","message","has","field","any","get","record","response","setStatus","clear","getMessage","Form","data","$data","$errors","$canSubmit","$multipart","$json","$id","setData","newData","clearError","updateData","updateId","getId","deleteData","setFile","files","multiple","File","getHeaders","headers","getData","formData","serializeOptions","jsonData","addData","isSubmittable","isUpdate","json","isJson","post","url","id","submit","put","patch","delete","requestType","beforeSubmit","options","Promise","resolve","reject","api","then","onSuccess","catch","error","onFail","finally","afterSubmit","reset","hasError","getErrorMessage","getError","Toast","toast","useToast","config","position","timeout","closeOnClick","pauseOnFocusLoss","pauseOnHover","showCloseButtonOnHover","closeButton","icon","fire","class","for","_createElementVNode","_hoisted_18","_createVNode","_component_breadcrumb_list","items","breadcrumbs","_hoisted_1","_hoisted_2","_hoisted_3","onInput","_cache","$event","form","target","onSubmit","_withModifiers","$options","_hoisted_4","_hoisted_5","_toDisplayString","_ctx","$t","_hoisted_6","_hoisted_7","_component_v_icon","_component_validation_feedback","_hoisted_8","_hoisted_9","_createElementBlock","_Fragment","_renderList","groups","group","_hoisted_10","_hoisted_11","_hoisted_13","_hoisted_14","min","_hoisted_16","title","onClick","removeGroup","_hoisted_20","_component_v_button","color","addGroup","_hoisted_21","disabled","props","String","required","route","active","async","methods","push","splice","__exports__","render"],"sourceRoot":""}